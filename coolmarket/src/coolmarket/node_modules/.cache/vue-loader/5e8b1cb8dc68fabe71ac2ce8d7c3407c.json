{"remainingRequest":"/Users/jb/javabtc/sts/coolmarket/src/coolmarket/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jb/javabtc/sts/coolmarket/src/coolmarket/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jb/javabtc/sts/coolmarket/src/coolmarket/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jb/javabtc/sts/coolmarket/src/coolmarket/src/views/MarketDetail.vue?vue&type=template&id=3f3e6332&scoped=true&","dependencies":[{"path":"/Users/jb/javabtc/sts/coolmarket/src/coolmarket/src/views/MarketDetail.vue","mtime":1630111495279},{"path":"/Users/jb/javabtc/sts/coolmarket/src/coolmarket/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jb/javabtc/sts/coolmarket/src/coolmarket/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jb/javabtc/sts/coolmarket/src/coolmarket/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jb/javabtc/sts/coolmarket/src/coolmarket/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}